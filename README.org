** Emacs Language Server Client

  [[https://melpa.org/#/lsp-mode][file:https://melpa.org/packages/lsp-mode-badge.svg]]
  [[https://stable.melpa.org/#/lsp-mode][file:https://stable.melpa.org/packages/lsp-mode-badge.svg]]
  [[https://gitter.im/emacs-lsp/lsp-mode][file:https://badges.gitter.im/emacs-lsp/lsp-mode.svg]]
  [[https://travis-ci.org/emacs-lsp/lsp-mode][file:https://travis-ci.org/emacs-lsp/lsp-mode.svg?branch=master]]

** Overview
   Client for [[https://github.com/Microsoft/language-server-protocol/][Language Server Protocol]] (v3.0). [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] aims to provide IDE-like experience by providing optional integration with the most popular Emacs packages like ~company~, ~flycheck~ and ~projectile~.

   *This release is breaking refer to the configuration section for upgrade instruction.*

   /Note: if you still want to use the legacy lsp-mode refer to melpa stable./

   /Note: if your server is still not ported to the new interface, please file a bug in the corresponding repo./

   - Diagnostics (via builtin ~flymake~ when Emacs > 26 or [[https://github.com/flycheck/flycheck][flycheck]]/[[https://github.com/emacs-lsp/lsp-ui][lsp-ui]])
   - Code completion - using [[https://github.com/tigersoldier/company-lsp][company-lsp]] or builtin ~complete-at-point~
   - Hovers - using [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
   - Code actions - using ~lsp-execute-code-action~ or [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]]
   - Code outline - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][imenu]] or ~helm-imenu~
   - Code navigation - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]
   - Code lens (references/implementations) - using builtin [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html][xref]]
   - Highlights
   - Code formatting
   - Debugger - [[https://github.com/yyoncho/dap-mode/][dap-mode]]
* What's new in lsp.el?
  - ~lsp-mode~ now have single entry point ~lsp~ for all language and based on the major mode starts the corresponding language servers.
  - ~flymake~ integration.
  - ~lsp~ automatically enables and configures ~company-lsp~, ~lsp-ui~, ~yassnippet~, or ~flymake~ if they are present so no additional configuration is needed except installing the packages. That behavior could be disabled by setting ~lsp-auto-configure~ to ~nil~.
  - ~lsp-mode~ ships with several predefined servers located in ~lsp-clients.el~ which does not require additional package. For the more complex Language Servers like ~Eclipse JDT~, ~ccls~, ~cquery~ and ~haskell~ we still require separate package due to relatively high code base.
  - ~lsp-mode~ handles automatically server failures by asking the user whether he/she wants to restart the server.
  - introduced new command ~lsp-describe-session~ which replaces the existing one ~lsp-capabilities~. The command lists the folders that are part of the workspace and the servers that are associated with the corresponding folder.
  - ~lsp-mode~ displays information about the running server and it's status in the modeline.
  - ~lsp-define-stdio-client~ and ~lsp-define-tcp-client~ are replaced with ~lsp-register-client~
  - ~lsp~ rely on ~projectile~ or ~project.el~ now only for suggesting project root. Once you open new file in a project and start ~lsp~ it will provide several options(import project, blacklist project, select other directory root). Once you select a root it will be persisted and used for the next sessions.
  - ~lsp-mode~ now supports multiple language servers per single file and workspace.
  - changed ~lsp-mode~ to more sensible defaults.
  - Removed all synchronous calls from the server startup.
  - Implemented better multi-folder support.
* Installation

** Install via melpa
   The recommended way to install ~lsp-mode~ is via ~package.el~ - the built-in package manager in Emacs. ~lsp-mode~ is available on the two major ~package.el~ community maintained repos - [[http://stable.melpa.org][MELPA Stable]] and [[http://melpa.org][MELPA]].

   M-x ~package-install~ [RET] ~lsp-mode~ [RET]

** Spacemacs
   [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]] is included in spacemacs. Add ~lsp~ to ~dotspacemacs-configuration-layers~ and configure the language that you want to use to be backed by ~lsp~ backend.
* Configuration
  Add the following line in your configuration file:
  #+BEGIN_SRC emacs-lisp
    (require 'lsp-mode)
    (add-hook 'XXX-mode-hook 'lsp)
  #+END_SRC
  where ~XXX~ could be major mode like ~python~, ~java~, ~c++~. Alternatively, if you want to minimize you configuration you may use ~prog-mode-hook~. In case you do that, `lsp` will try to start for each programming mode and echo a message when there is no client registered for the current mode or if the corresponding server is not present. In addition, ~lsp-mode~ will automatically detect and configure [[https://github.com/emacs-lsp/lsp-ui][lsp-ui]] and [[https://github.com/tigersoldier/company-lsp][company-lsp]]. To turn off that behavior you could set ~lsp-auto-configure~ to ~nil~.

* Supported languages
  Some of the servers are directly supported by ~lsp-mode~ by requiring
  ~lsp-clients.el~ while other require installing additional package which provide
  server specific functionality.

  | Language              | Language Server             | Built-in     | Installation command                           | Debugger |
  |-----------------------+-----------------------------+--------------+------------------------------------------------+----------|
  | Bash                  | [[https://github.com/mads-hartmann/bash-language-server][bash-language-server]]        | Yes          | npm i -g bash-language-server                  |          |
  | C++                   | [[https://github.com/MaskRay/ccls][ccls]]                        | [[https://github.com/MaskRay/emacs-ccls][emacs-ccls]]   | [[https://github.com/MaskRay/ccls][ccls]]                                           |          |
  | C++                   | [[https://clang.llvm.org/extra/clangd.html][clangd]]                      | Yes          | [[https://clang.llvm.org/extra/clangd.html][clangd]]                                         |          |
  | C++                   | [[https://github.com/cquery-project/cquery][cquery]]                      | [[https://github.com/cquery-project/emacs-cquery][emacs-cquery]] | [[https://github.com/cquery-project/cquery][cquery]]                                         |          |
  | CSS                   | [[https://github.com/vscode-langservers/vscode-css-languageserver-bin][css]]                         | Yes          | npm install -g vscode-css-languageserver-bin   |          |
  | Dart                  | [[https://github.com/natebosch/dart_language_server][dart_language_server]]        | Yes          | pub global activate dart_language_server       |          |
  | Go                    | [[https://github.com/sourcegraph/go-langserver][go-langserver]]               | Yes          | go get -u github.com/sourcegraph/go-langserver |          |
  | Groovy                | [[https://github.com/palantir/language-servers][groovy-language-server]]      | Yes          | [[https://github.com/palantir/language-servers][groovy-language-server]]                         |          |
  | HTML                  | [[https://github.com/vscode-langservers/vscode-html-languageserver][html]]                        | Yes          | npm install -g vscode-html-languageserver-bin  |          |
  | Haskell               | [[https://github.com/haskell/haskell-ide-engine][IDE engine]]                  | [[https://github.com/emacs-lsp/lsp-haskell][lsp-haskell]]  | [[https://github.com/haskell/haskell-ide-engine][IDE engine]]                                     |          |
  | Java                  | [[https://github.com/eclipse/eclipse.jdt.ls][Eclipse JDT LS]]              | [[https://github.com/emacs-lsp/lsp-java][lsp-java]]     | Automatic by [[https://github.com/emacs-lsp/lsp-java][lsp-java]]                          | Yes      |
  | Javascript/Typescript | [[https://github.com/sourcegraph/javascript-typescript-langserver][javascript-typescript-stdio]] | Yes          | npm i -g javascript-typescript-langserver      |          |
  | Ocaml                 | [[https://github.com/freebroccolo/ocaml-language-server][ocaml-language-server]]       | Yes          | [[https://github.com/freebroccolo/ocaml-language-server][ocaml-language-server]]                          |          |
  | PHP                   | [[https://github.com/felixfbecker/php-language-server][php-language-server]]         | Yes          | [[https://github.com/felixfbecker/php-language-server][php-language-server]]                            |          |
  | Python                | [[https://github.com/palantir/python-language-server][pyls]]                        | Yes          | pip install 'python-language-server[all]'      | Yes      |
  | Ruby                  | [[https://github.com/castwide/solargraph][solargraph]]                  | Yes          | gem install solargraph                         |          |
  | Rust                  | [[https://github.com/rust-lang-nursery/rls][rls]]                         | Yes          | [[https://github.com/rust-lang-nursery/rls][rls]]                                            |          |
  | Scala                 | [[https://github.com/rossabaker/lsp-scala][lsp-scala]]                   | TBD          |                                                |          |
  | Vue                   | [[https://github.com/vuejs/vetur/tree/master/server][vue-language-server]]         | Yes          | npm install -g vue-language-server                                               |          |

* Commands
  - ~lsp-describe-session~ - Display session folders and running servers.
  - ~lsp-describe-thing-at-point~ - Display help for the thing at point.
  - ~lsp-execute-code-action~ - Execute code action.
  - ~lsp-format-buffer~ - Format current buffer
  - ~lsp-goto-implementation~ - Go to implementation
  - ~lsp-goto-type-definition~ - Go to type definition
  - ~lsp-rename~ - Rename symbol at point
  - ~lsp-restart-workspace~ - Restart project
  - ~lsp-symbol-highlight~ - Highlight all relevant references to the symbol under point.
  - ~lsp-workspace-folders-add~ - Add workspace folder
  - ~lsp-workspace-folders-remove~ - Remove workspace folder
  - ~lsp-workspace-folders-switch~ - Switch workspace folder
  - ~imenu~ or ~helm-imenu~ - display document structure.
  - ~completion-at-point~ - display completion using built-in emacs ~completion-at-point~ framework.
  - ~xref-find-definition~ - to find the definition for the symbol under point. (~M-.~)
  - ~xref-find-references~ - Find references (~M-?~)

* Configuration
  - ~lsp-print-io~ - If non-nil, print all messages to and from the language server to ~*Messages*~.
  - ~lsp-inhibit-message~ - If non-nil, inhibit the message echo via ~inhibit-message~.
  - ~lsp-report-if-no-buffer~ - If non nil the errors will be reported even when the file is not open.
  - ~lsp-keep-workspace-alive~ - If non nil keep workspace alive when the last workspace buffer is closed.
  - ~lsp-enable-snippet~ - Enable/disable snippet completion support.
  - ~lsp-auto-guess-root~ - Automatically guess the project root using projectile/project.
  - ~lsp-restart~ - Defines how server exited event must be handled.
  - ~lsp-session-file~ - Automatically guess the project root using projectile/project.
  - ~lsp-auto-configure~ - Auto configure ~lsp-mode~. When set to t ~lsp-mode~ will auto-configure ~lsp-ui~ and ~company-lsp~.
  - ~lsp-document-sync-method~ - How to sync the document with the language server.
  - ~lsp-auto-execute-action~ - Auto-execute single action.
  - ~lsp-eldoc-render-all~ - Define whether all of the returned by ~document/onHover~ will be displayed. If ~lsp-markup-display-all~ is set to nil ~eldoc~ will show only the symbol information.
  - ~lsp-enable-completion-at-point~ - Enable ~completion-at-point~ integration.
  - ~lsp-enable-xref~ - Enable xref integration.
  - ~lsp-prefer-flymake~ - If you prefer flycheck and ~lsp-ui-flycheck~ is available, ~(setq lsp-prefer-flymake nil)~.
  - ~lsp-enable-indentation~ - Indent regions using the file formatting functionality provided by the language server.
  - ~lsp-enable-on-type-formatting~ - Enable ~textDocument/onTypeFormatting~ integration.
  - ~lsp-before-save-edits~ - If non-nil, ~lsp-mode~ will apply edits suggested by the language server before saving a document.
  - ~lsp-imenu-show-container-name~ - Display the symbol's container name in an imenu entry.
  - ~lsp-imenu-container-name-separator~ - Separator string to use to separate the container name from the symbol while displaying imenu entries.
  - ~lsp-imenu-sort-methods~ - How to sort the imenu items. The value is a list of ~kind~, ~name~ or ~position~. Priorities are determined by the index of the element.
  - ~lsp-response-timeout~ - Number of seconds to wait for a response from the language server before timing out.

** Hooks
   ~lsp-mode~ provides a handful of hooks that can be used to extend and configure
   the behaviour of language servers. A full list of hooks is available in the
   [[API documentation][./doc/API.org]].

* Adding support for languages
  See [[./doc/API.org][API docs]]

  Here it is the minimal configuration that is needed for new language server registration. Refer to the documentation of ~lsp-client.el~ for the additional settings supported on registration time. ~lsp-language-id-configuration~ must be updated to contain the corresponding mode -> language id - in this case ~(python-mode . "python")~
  #+BEGIN_SRC emacs-lisp
    (lsp-register-client
     (make-lsp-client :new-connection (lsp-stdio-connection "pyls")
                      :major-modes '(python-mode)
                      :server-id 'pyls))
  #+END_SRC
** FAQ
*** How to configure a server with local variables?
    Add ~lsp~ server call to ~hack-local-variables-hook~ which runs right after the local variables are loaded.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'hack-local-variables-hook
                (lambda () (when (derived-mode-p 'XXX-mode) (lsp))))
    #+END_SRC
** See also
   - [[https://github.com/yyoncho/dap-mode][dap-mode]] - Debugger integration for ~lsp-mode~.
   - [[https://github.com/joaotavora/eglot][eglot]] - An alternative minimal LSP implementation.
